// Generated by CoffeeScript 1.8.0
var BMO_FACE_COLOR, BMO_FRONT_COLOR, BMO_GAME_PAD_COLOR, BMO_GREEN_BTN, BMO_HEIGHT, BMO_RED_BTN, BMO_TRIANGLE_COLOR, BMO_WIDTH, GRID, canvas, ctx, draw, drawBMO, drawButton, drawCartridgeSlot, drawDPad, drawEyes, drawLeftArm, drawLeftLeg, drawLoop, drawMouth, drawRightArm, drawRightLeg, drawRoundRect, drawTriangle, getMousePos, hideCursor, initT, interval, last, mouseX, mouseY, toRads;

canvas = document.getElementById("canvas");

ctx = canvas.getContext("2d");

BMO_FRONT_COLOR = "#63bda5";

BMO_FACE_COLOR = "#d6ffdd";

BMO_GAME_PAD_COLOR = "#ddbc2c";

BMO_TRIANGLE_COLOR = "#21e7f7";

BMO_GREEN_BTN = "#10ff31";

BMO_RED_BTN = "#f70052";

GRID = 30;

BMO_HEIGHT = 15 * GRID;

BMO_WIDTH = 10 * GRID;

ctx.canvas.width = window.innerWidth;

ctx.canvas.height = window.innerHeight;

mouseX = 200;

mouseY = 100;

initT = Date.now();

last = initT;

interval = 33.3;

getMousePos = function(canvas, evt) {
  var rect, root;
  rect = canvas.getBoundingClientRect();
  root = document.documentElement;
  this.mouseX = evt.clientX - rect.left - root.scrollLeft;
  this.mouseY = evt.clientY - rect.top - root.scrollTop;
  return {
    x: mouseX,
    y: mouseY
  };
};

hideCursor = function() {
  return document.getElementById('canvas').style.cursor = 'none';
};

window.onload = function() {
  var callback;
  hideCursor();
  callback = function(evt) {
    return getMousePos(canvas, evt);
  };
  return canvas.addEventListener('mousemove', callback);
};

toRads = function(degrees) {
  return degrees * Math.PI / 180;
};

drawDPad = function(x, y) {
  drawRoundRect(x + (0.5 * GRID), y, 0.5 * GRID, 1.5 * GRID, 1, BMO_GAME_PAD_COLOR);
  return drawRoundRect(x, y + (0.5 * GRID), 1.5 * GRID, 0.5 * GRID, 1, BMO_GAME_PAD_COLOR);
};

drawTriangle = function(x, y, size) {
  var base, height;
  ctx.save();
  ctx.fillStyle = BMO_TRIANGLE_COLOR;
  ctx.strokeStyle = BMO_TRIANGLE_COLOR;
  base = size / 2;
  height = Math.floor(Math.sqrt((size * size) - (base * base)));
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.lineTo(x + base, y + height);
  ctx.lineTo(x - base, y + height);
  ctx.closePath();
  ctx.fill();
  ctx.stroke();
  return ctx.restore();
};

drawButton = function(x, y, size, color) {
  ctx.save();
  ctx.fillStyle = color;
  ctx.strokeStyle = color;
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.arc(x, y, size, 0, 2 * Math.PI, true);
  ctx.stroke();
  ctx.fill();
  return ctx.restore();
};

drawEyes = function(x, y) {
  ctx.save();
  ctx.beginPath();
  ctx.fillStyle = "#222";
  ctx.strokeStyle = "#222";
  ctx.lineWidth = 0.1 * GRID;
  ctx.arc(x + (3 * GRID), y + (3 * GRID), 0.5 * GRID, 1.90 * Math.PI, 1.10 * Math.PI, true);
  ctx.stroke();
  ctx.beginPath();
  ctx.arc(x + (7 * GRID), y + (3 * GRID), 0.5 * GRID, 1.90 * Math.PI, 1.10 * Math.PI, true);
  return ctx.stroke();
};

drawMouth = function(x, y) {
  ctx.beginPath();
  ctx.arc(x + (5 * GRID), y, 5 * GRID, 0.4 * Math.PI, 0.6 * Math.PI);
  return ctx.stroke();
};

drawCartridgeSlot = function(x, y) {
  drawRoundRect(x + (1 * GRID), y + (9 * GRID), 4 * GRID, 0.5 * GRID, 1, "#222");
  ctx.beginPath();
  ctx.arc(x + (8.5 * GRID), y + (9.25 * GRID), 0.25 * GRID, 0, 2 * Math.PI);
  ctx.stroke();
  return ctx.fill();
};

drawRoundRect = function(x, y, width, height, radius, color) {
  ctx.save();
  ctx.beginPath();
  ctx.fillStyle = color;
  ctx.strokeStyle = color;
  ctx.moveTo(x + radius, y);
  ctx.arcTo(x + width, y, x + width, y + radius, radius);
  ctx.arcTo(x + width, y + height, x + width - radius, y + height, radius);
  ctx.arcTo(x, y + height, x, y + height - radius, radius);
  ctx.arcTo(x, y, x + radius, y, radius);
  ctx.fill();
  ctx.stroke();
  return ctx.restore();
};

drawLeftArm = function(x, y, len) {
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.strokeStyle = BMO_FRONT_COLOR;
  ctx.lineWidth = 0.9 * GRID;
  ctx.quadraticCurveTo(x - len, y, x - len, y - (1.25 * len));
  ctx.stroke();
  return ctx.restore();
};

drawRightArm = function(x, y, len) {
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.strokeStyle = BMO_FRONT_COLOR;
  ctx.lineWidth = 0.9 * GRID;
  ctx.quadraticCurveTo(x + +len, y, x + len, y - (1.25 * len));
  ctx.stroke();
  return ctx.restore();
};

drawLeftLeg = function(x, y, len) {
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.strokeStyle = BMO_FRONT_COLOR;
  ctx.lineWidth = 0.9 * GRID;
  ctx.quadraticCurveTo(x - (2 * GRID), y + len, x, y + (2 * len));
  ctx.stroke();
  return ctx.restore();
};

drawRightLeg = function(x, y, len) {
  ctx.save();
  ctx.beginPath();
  ctx.moveTo(x, y);
  ctx.strokeStyle = BMO_FRONT_COLOR;
  ctx.lineWidth = 0.9 * GRID;
  ctx.quadraticCurveTo(x + (2 * GRID), y + len, x, y + (2 * len));
  ctx.stroke();
  return ctx.restore();
};

drawBMO = function(x, y, t) {
  ctx.lineCap = 'round';
  drawLeftArm(x + (0.5 * GRID), y + (8 * GRID), (3 * GRID) + t);
  drawRightArm(x + (9.5 * GRID), y + (8 * GRID), (3 * GRID) + t);
  drawLeftLeg(x + (2 * GRID), y + (13 * GRID), (2.5 * GRID) + (t / 2));
  drawRightLeg(x + (8 * GRID), y + (13 * GRID), (2.5 * GRID) + (t / 2));
  drawRoundRect(x, y, BMO_WIDTH, BMO_HEIGHT, 10, BMO_FRONT_COLOR);
  drawRoundRect(x + (1 * GRID), y + (1 * GRID), 8 * GRID, 7 * GRID, 10, BMO_FACE_COLOR);
  drawEyes(x, y);
  drawMouth(x, y);
  drawCartridgeSlot(x, y);
  drawDPad(x + (2 * GRID), y + (11 * GRID));
  drawTriangle(x + (6 * GRID), y + (11 * GRID), GRID);
  drawButton(x + (8 * GRID), y + (12 * GRID), 0.4 * GRID, BMO_GREEN_BTN);
  return drawButton(x + (7 * GRID), y + (13.5 * GRID), 0.6 * GRID, BMO_RED_BTN);
};

draw = function(mouseX, mouseY, t) {
  var bgColor, time;
  ctx.clearRect(0, 0, canvas.width, canvas.height);
  bgColor = '#' + Math.random().toString(16).substr(-6);
  if (t % 3 === 1) {
    document.getElementById('canvas').style.background = bgColor;
  }
  time = Math.sin(t / 100) * 10;
  console.log(time);
  return drawBMO(mouseX - (BMO_WIDTH / 2), mouseY - (BMO_HEIGHT / 3), time);
};

drawLoop = function() {
  var delta, now, time;
  window.requestAnimationFrame(drawLoop);
  now = Date.now();
  delta = now - last;
  if (delta > interval) {
    last = now - (delta % interval);
    time = now - initT;
    return draw(mouseX, mouseY, time);
  }
};

drawLoop();
